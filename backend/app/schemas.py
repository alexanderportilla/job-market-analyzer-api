
from pydantic import BaseModel
from datetime import datetime
from typing import Optional, List

# --- Pydantic Schemas for API Data Validation ---

class JobOfferBase(BaseModel):
    """
    Base schema for a Job Offer, contains common attributes.
    """
    title: str
    company: Optional[str] = None
    location: Optional[str] = None
    description: str
    url: str
    source: str

class JobOfferCreate(JobOfferBase):
    """
    Schema used for creating a new Job Offer in the database.
    Inherits from JobOfferBase.
    """
    pass

class JobOffer(JobOfferBase):
    """
    Schema for reading/returning a Job Offer from the API.
    Includes attributes that are generated by the database.
    """
    id: int
    scraped_at: datetime

    class Config:
        # This allows Pydantic to read the data even if it is not a dict,
        # but an ORM model (or any other arbitrary object with attributes).
        from_attributes = True

class TechnologyStat(BaseModel):
    """
    Schema for returning technology statistics.
    """
    technology: str
    count: int

class SearchResponse(BaseModel):
    """
    Schema for search response with pagination.
    """
    offers: List[JobOffer]
    total: int
    page: int
    pages: int
    has_next: bool
    has_prev: bool
